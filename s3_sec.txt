import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as kms from 'aws-cdk-lib/aws-kms';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment';
import { Construct } from 'constructs';

export class S3WithKmsEncryptionStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Step 1: Create a KMS Key for S3 bucket encryption
    const kmsKey = new kms.Key(this, 'MyKmsKey', {
      enableKeyRotation: true, // Enable key rotation for security
    });

    // Step 2: Create an S3 bucket with AWS KMS CMK encryption
    const s3Bucket = new s3.Bucket(this, 'MySecureBucket', {
      encryption: s3.BucketEncryption.KMS, // Use KMS encryption
      encryptionKey: kmsKey, // Use the KMS key created above
      versioned: true,
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL, // Block public access
    });

    // Step 3: Deny the use of presigned URLs in the bucket policy
    s3Bucket.addToResourcePolicy(
      new iam.PolicyStatement({
        actions: ['s3:GetObject'],
        effect: iam.Effect.DENY,
        resources: [`${s3Bucket.bucketArn}/*`],
        conditions: {
          StringNotEquals: {
            'aws:RequestTag/PresignedUrlAllowed': 'true',
          },
          Bool: {
            'aws:SecureTransport': 'false',
          },
        },
        principals: [new iam.AnyPrincipal()],
      })
    );

    // Step 4: Create Lambda functions
    const lambdaFunction1 = new lambda.Function(this, 'LambdaFunction1', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset('lambda'),
    });

    const lambdaFunction2 = new lambda.Function(this, 'LambdaFunction2', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset('lambda'),
    });

    // Step 5: Allow Lambda functions to read/write to the S3 bucket
    s3Bucket.grantReadWrite(lambdaFunction1); // Read/Write permission for LambdaFunction1
    s3Bucket.grantReadWrite(lambdaFunction2); // Read/Write permission for LambdaFunction2

    // Step 6: Optionally, deploy something to the S3 bucket
    new s3deploy.BucketDeployment(this, 'DeployFiles', {
      sources: [s3deploy.Source.asset('./assets')],
      destinationBucket: s3Bucket,
    });
  }
}
